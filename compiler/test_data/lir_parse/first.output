Right
  [ Function
    { name = "my_function"
    , params =
      [ StrName
        ( NonDetStr
          { getStr = "first" }
        )
      , StrName
        ( NonDetStr
          { getStr = "second" }
        )
      ]
    , graph = Graph
      { start = Label
        { name = StrName
          ( NonDetStr
            { getStr = "first" }
          )
        }
      , blocks = fromList
        [
          ( Label
            { name = StrName
              ( NonDetStr
                { getStr = "second" }
              )
            }
          , Block
            { entry = BlockArgs []
            , body =
              [ Assign
                ( StrName
                  ( NonDetStr
                    { getStr = "y" }
                  )
                )
                ( Add
                  ( Var
                    ( StrName
                      ( NonDetStr
                        { getStr = "x" }
                      )
                    )
                  )
                  ( Var
                    ( StrName
                      ( NonDetStr
                        { getStr = "y" }
                      )
                    )
                  )
                )
              ]
            , exit = Control
              ( Jump
                ( BlockCall
                  { label = Label
                    { name = StrName
                      ( NonDetStr
                        { getStr = "first" }
                      )
                    }
                  , args =
                    [ Var
                      ( StrName
                        ( NonDetStr
                          { getStr = "y" }
                        )
                      )
                    ]
                  }
                )
              )
            }
          )
        ,
          ( Label
            { name = StrName
              ( NonDetStr
                { getStr = "third" }
              )
            }
          , Block
            { entry = BlockArgs []
            , body = []
            , exit = Control Ret
            }
          )
        ,
          ( Label
            { name = StrName
              ( NonDetStr
                { getStr = "first" }
              )
            }
          , Block
            { entry = BlockArgs []
            , body =
              [ Assign
                ( StrName
                  ( NonDetStr
                    { getStr = "y" }
                  )
                )
                ( Add
                  ( Var
                    ( StrName
                      ( NonDetStr
                        { getStr = "x" }
                      )
                    )
                  )
                  ( Var
                    ( StrName
                      ( NonDetStr
                        { getStr = "y" }
                      )
                    )
                  )
                )
              ]
            , exit = Control
              ( CondJump
                ( Var
                  ( StrName
                    ( NonDetStr
                      { getStr = "y" }
                    )
                  )
                )
                ( BlockCall
                  { label = Label
                    { name = StrName
                      ( NonDetStr
                        { getStr = "first" }
                      )
                    }
                  , args =
                    [ Var
                      ( StrName
                        ( NonDetStr
                          { getStr = "y" }
                        )
                      )
                    ]
                  }
                )
                ( BlockCall
                  { label = Label
                    { name = StrName
                      ( NonDetStr
                        { getStr = "third" }
                      )
                    }
                  , args = []
                  }
                )
              )
            }
          )
        ]
      , end = Label
        { name = StrName
          ( NonDetStr
            { getStr = "third" }
          )
        }
      }
    }
  ]
